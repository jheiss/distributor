0.6.5:
    Added a half_close configuration option to allow the TCP
      half close support to be turned off.  The default
      continues to be for half close support to be enabled.  If
	  half_close is set to "no" then an EOF (end of file) from
	  either the client or server will result in the whole
      connection being closed.  This turns out to be necessary
      for LDAP in some situations, and may be necessary for
      others.

    Fixed things so that a target address can be specified as an
      IPv6 address.  Tested distributor to ensure it is capable
	  of handling targets specified as hostnames that resolve
	  only to IPv6 addresses, as well as targets specified
      directly as IPv6 addresses.

    Added a new thread (DelayedMover) associated with each
	  target.  This new thread handles any data that can't be
	  immediately written to the appropriate destination by
	  DataMover (the thread which passes data back and forth for
	  established connections).  Previously DataMover would just
	  wait until it could write the data, which meant it could
      be hung indefinately by an unresponsive destination.
0.6.1:
    Fix for handling clients that we can't find a valid target
      for.
    Added conns function to Controller which prints all of the
      connections that Distributor is currently handling.
0.6:
    Rewrote round robin algorithm.  The previous version was
      a quick hack.  It worked fairly well under normal
      conditions (all targets enabled, etc.) but fell apart
      otherwise.  This version should be a bit more robust.
    Fixed some deadlock bugs by simplifying the methods that
      are used to transfer clients/connections from one thread
      to another.  Rather than do a lot of heavy processing,
      the methods just put the client in a queue which is
      processed later by the receiving thread.  This reduces
      the number of data structures that are accessed by
      multiple threads.
    Found a better way to handle registering connections with
      Selectors, by using queues along the same lines as the
      last group of fixes.  The old method I was using required
      much ugly hackery to avoid deadlocks.  The queueing method
      is clean.
    Added a 'memstats' command to Controller to assist in
      detecting any memory leaks.  memstats reports the size of
      all long-term data structures used by Distributor.
0.5.5:
    Fixed a number of bugs that were triggered in various
      special cases, generally leading to Distributor throwing
      an unchecked exception and crashing.
    Added total connection counts and byte counts to the
      reporting done by the 'stats' command to provide better
      statistics about Distributor over time, rather than just
      statistics about the current state of things.
0.5:
    Improved process by which incoming connections are
      distributed to back-end servers.  Formerly a mostly
      hard-coded, single-threaded process, it is now fully user
      configurable and makes use of non-blocking I/O to handle
      multiple connections at once.  These improvements will
      also allow more complicated distribution algorithms in the
      future.  An HTTP cookie algorithm is in development for a
      future release.
    Added a failure count for each back-end server; when the
      number of consecutive failures passes a user-configurable
      threshold that target is disabled.  This saves future
      connections from having to time out before moving on to
      another server.  For those who do not have more
      complicated server testing needs, I've added a simple TCP
      connection service test to detect when these servers have
      recovered so they can be re-enabled as a target.
0.4:
    Cleaner handling of selection keys in DataMover, which
      fixes a bug that led to a tight loop in some circumstances
      and spurious warning messages.
0.3:
    Added log warning if service test times out
0.2:
    Made control server port a user-configurable item
0.1:
    Initial release

